name: Build Console and Daemon

on:
  workflow_dispatch:
  # Allow calling from release script
  workflow_call:
    inputs:
      release:
        required: false
        type: boolean
        default: false
      release_tag:
        required: false
        type: string
  # Build on push/pull to main
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Build the windows client
  build-client:
    name: Build console client on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ^8.14.0

      - name: CD, install, and build
        run: |
          cd console
          pnpm install
          pnpm dist

      # Non-release console artifact upload
      - name: Upload Console Artifact
        if: ${{ !(inputs.release) }}
        uses: actions/upload-artifact@v4
        with: 
          name: rc2-console-win
          path: console/output/rc2-console.exe
          if-no-files-found: error

      # Release upload
      - name: Upload Console Release Artifact
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv console/output/rc2-console.exe ./rc2-console-${{ inputs.release_tag }}.exe
          gh release upload ${{ inputs.release_tag }} ./rc2-console-${{ inputs.release_tag }}.exe

  # Build the daemon for windows/linux
  build-daemon:
    name: Build Daemon on Windows & Linux
    strategy:
      matrix:
        runtime: [linux-x64, linux-arm64, win-x64]
    runs-on: ubuntu-latest
    env:
      DAEMON_SRC_PATH: ./daemon
    steps:
      # Checkout repo with recursive submodules
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      # Setup dotnet environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      # Restore deps
      - name: Restore dependencies
        run: dotnet restore
        working-directory: ${{ env.DAEMON_SRC_PATH }}
      
      # Build & Publish the daemon
      - name: Build & Publish
        working-directory: ${{ env.DAEMON_SRC_PATH }}
        run: dotnet publish --no-restore -c Release -r ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -o "${{env.DOTNET_ROOT}}/rc2-daemon"
      
      # Upload non-release artifacts
      - name: Upload non-release artifacts
        if: ${{ !(inputs.release) }}
        uses: actions/upload-artifact@v4
        with: 
          name: rc2-daemon-${{ matrix.runtime }}
          path: |
            "${{env.DOTNET_ROOT}}/rc2-daemon/daemon.exe"
            "${{env.DOTNET_ROOT}}/rc2-daemon/daemon"
            "${{env.DOTNET_ROOT}}/rc2-daemon/*.dll"
            "${{env.DOTNET_ROOT}}/rc2-daemon/config.example.toml"
          if-no-files-found: error
      
      # Upload release zip
      - name: Upload release zip
        if: ${{ inputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          Compress-Archive -Path "${{env.DOTNET_ROOT}}/rc2-daemon/daemon.exe", "${{env.DOTNET_ROOT}}/rc2-daemon/daemon", "${{env.DOTNET_ROOT}}/rc2-daemon/*.dll", "${{env.DOTNET_ROOT}}/rc2-daemon/config.example.toml" -Destination rc2-daemon-${{ inputs.release_tag }}-${{ matrix.runtime }}.zip
          gh release upload ${{ inputs.release_tag }} rc2-daemon-${{ inputs.release_tag }}-${{ matrix.runtime }}.zip